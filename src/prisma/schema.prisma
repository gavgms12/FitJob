// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id            String   @id @default(cuid())
  nome          String
  email         String   @unique
  senha         String
  criadoEm      DateTime @default(now())
  curriculos    Curriculo[]
  candidaturas  Candidatura[]
  caracteristicaVaga CaracteristicaVaga?
}

model CaracteristicaVaga {
  usuarioId           String   @id
  modeloTrabalho      String
  localizacao         String
  salarioDesejadoMin  Float
  salarioDesejadoMax  Float
  usuario             Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

model Curriculo {
  id           String   @id @default(cuid())
  usuarioId    String
  conteudo     String
  habilidades  String   // Armazenado como JSON
  softSkills   String   // Armazenado como JSON
  criadoEm     DateTime @default(now())
  
  usuario      Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  candidaturas Candidatura[]
  resultadosAnalise ResultadoAnalise[]
}

model Vaga {
  id                   String   @id @default(cuid())
  titulo               String
  descricao            String
  empresa              String
  modeloTrabalho       String
  localizacao          String
  salario              Float
  requisitosHardSkills String   // Armazenado como JSON
  requisitosSoftSkills String   // Armazenado como JSON
  
  candidaturas         Candidatura[]
  resultadosAnalise    ResultadoAnalise[]
}

model ResultadoAnalise {
  id                       String   @id @default(cuid())
  curriculoId             String
  vagaId                  String
  porcentagemCompatibilidade Float
  palavrasChaveFaltando    String   // Armazenado como JSON
  sugestoesMelhoria        String   // Armazenado como JSON
  data                     DateTime @default(now())
  
  curriculo                Curriculo @relation(fields: [curriculoId], references: [id])
  vaga                     Vaga      @relation(fields: [vagaId], references: [id])
  candidatura             Candidatura?
}

model Candidatura {
  id                String   @id @default(cuid())
  usuarioId         String
  curriculoId       String
  vagaId            String
  dataCandidatura   DateTime @default(now())
  status            String
  resultadoAnaliseId String? @unique
  
  usuario           Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  curriculo         Curriculo @relation(fields: [curriculoId], references: [id], onDelete: Cascade)
  vaga              Vaga @relation(fields: [vagaId], references: [id])
  resultadoAnalise  ResultadoAnalise? @relation(fields: [resultadoAnaliseId], references: [id])
}
